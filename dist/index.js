import e from"fs";import o from"path";import t from"colors";import r from"yargs";import{rollup as n}from"rollup";import{CssCompiler as s,HtmlCompiler as i,buildConfig as l,MallEnvFlag as c}from"rollup-plugin-softmall-wb";import a from"sass";function d(e){if(0===e.trim().length)return"";return a.renderSync({data:e}).css.toString()}const p=new s,m=new i;function f(e,o,t){const r=function(e){let o=[c.prod,c.demo];return"dev"!==e&&"development"!==e||(o=[c.prod]),o}(t);return l(e,o,p,m,r)}p.registerCompiler("scss",d),p.registerCompiler("sass",d),o.resolve(),Date.prototype.format=function(e){let o;const t={"Y+":this.getFullYear().toString(),"m+":(this.getMonth()+1).toString(),"d+":this.getDate().toString(),"H+":this.getHours().toString(),"M+":this.getMinutes().toString(),"S+":this.getSeconds().toString()};for(let r in t)o=new RegExp("("+r+")").exec(e),o&&(e=e.replace(o[1],1==o[1].length?t[r]:t[r].padStart(o[1].length,"0")));return e};const u="single",g="folder";r.option("p",{alias:"prod",demand:!1,default:!0,describe:"Compile in production mode",type:"boolean"}).option("d",{alias:"dev",demand:!1,default:!1,describe:"Compile in development mode",type:"boolean"}).option("w",{alias:"watch",demand:!1,default:!1,describe:"Recompile when its source files change",type:"boolean"}).argv;const h={rootDir:"src/views",outDir:(e,o,t,r)=>`compiled/${r}`,beforeCompile:null,afterCompile(e,t){t=t.replace(".shell.vue",""),$(o.resolve(e,`${t}.vue.prod.js`)),$(o.resolve(e,`${t}.vue.demo.js`))},finished:null};let v="";r._.length<1&&(console.log("No input provided, compile terminated.".red),process.exit(-1)),e.existsSync(h.rootDir)&&e.existsSync("package.json")&&e.existsSync("src")||(console.log("Compiler must be run in root folder of the project.".red),process.exit(-1));const y=r._[0];let S=o.resolve(y);if(o.basename(y),e.existsSync(S)||(S=o.resolve(h.rootDir,y)),!e.existsSync(S)){const t=y.split("/");2!==t.length&&(console.log("File".red,`${y}`.yellow.bold,"doesn't exist.".red),process.exit(-1)),S=o.resolve(h.rootDir,t[0],`${t[1]}.vue`),t[1].replace(".vue",""),e.existsSync(S)||(console.log("File".red,`${y}`.yellow.bold,"doesn't exist.".red),console.log("Hint: Pattern '<folder>/<filename>' is required."),process.exit(-1))}let b=S;e.lstatSync(S).isDirectory()?v=g:(v=u,b=o.dirname(S));const w=o.resolve(".");function x(e){if(!Array.isArray(e))throw new Error("filelist must be an array.");e.forEach((e=>{const n=o.dirname(e),s=o.basename(e),i=`${o.basename(e,".vue")}.shell.vue`,l=o=>{console.log("Error".bgRed,e),console.log(o)},c=(e,o)=>{C(h.afterCompile)&&h.afterCompile(e,i),console.log(t.gray((new Date).format("HH:MM:SS")),"success".bgGreen,`${s} -> ${i}`.blue,`(${o})`.gray)};if(r.p){const t=o.resolve(h.outDir(n,s,v,"prod"));D(e,t,"prod",l,(()=>c(t,"production")))}if(r.d){const t=o.resolve(h.outDir(n,s,v,"dev"));D(e,t,"dev",l,(()=>c(t,"development")))}})),r.w||C(h.finished)&&h.finished()}async function D(e,o,t,r,s){let i=!0;try{const r=f(e,o,t);console.log(r);const i=await n(r);await i.close(),C(s)&&s()}catch(e){C(r)&&r(e),i=!1}return i}function $(o){e.existsSync(o)&&e.rmSync(o)}function C(e){return"function"==typeof e}-1===S.indexOf(w)&&(console.log("Only project file can be compiled.".red),process.exit(-1)),x(v===u?[S]:shelljs.ls(`${b}/*.vue`)),r.w&&(console.log("Watching for files change..."),function(t){e.watch(t,{persistent:!0,interval:1e3}).on("change",((e,t)=>{x([o.resolve(b,t)])}))}(S));
